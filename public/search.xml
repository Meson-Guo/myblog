<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[一键获取win7网络参数]]></title>
      <url>http://meson.space/2016/09/13/%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E5%8F%82%E6%95%B0%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="获取win7的网络参数"><a href="#获取win7的网络参数" class="headerlink" title="获取win7的网络参数"></a>获取win7的网络参数</h2><p>通过使用此脚本，可以不必再打开cmd，查询先关网络参数，保存类型为.cmd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@echo  Your USERNAME: %USERDOMAIN%\%username%&gt;&quot;%userprofile%\NetParameter.txt&quot;</div><div class="line">@echo  YOUR COMPUTERNAME: %COMPUTERNAME%&gt;&gt;&quot;%userprofile%\NetParameter.txt&quot;</div><div class="line">@echo  ______________&gt;&gt;&quot;%userprofile%\NetParameter.txt&quot;</div><div class="line">@echo  YOUR IP PARAMETER: &gt;&gt;&quot;%userprofile%\NetParameter.txt&quot;</div><div class="line">@ipconfig&gt;&gt;&quot;%userprofile%\NetParameter.txt&quot;</div><div class="line">@notepad &quot;%userprofile%\NetParameter.txt&quot;</div><div class="line">exit</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell文件读取相关脚本]]></title>
      <url>http://meson.space/2016/09/13/Shell%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E7%9B%B8%E5%85%B3%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="将表中的字段信息存入文本中"><a href="#将表中的字段信息存入文本中" class="headerlink" title="将表中的字段信息存入文本中"></a>将表中的字段信息存入文本中</h2><h3 id="说明-表名存储在ta-txt中-字段文本放在tabname目录下"><a href="#说明-表名存储在ta-txt中-字段文本放在tabname目录下" class="headerlink" title="说明-表名存储在ta.txt中,字段文本放在tabname目录下"></a>说明-表名存储在ta.txt中,字段文本放在tabname目录下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">cat ta.txt | while read line </div><div class="line">do</div><div class="line">arr=($line) </div><div class="line">hive -e &quot;desc $&#123;arr[0]&#125;&quot; &gt; tabname/$&#123;arr[0]&#125;.txt;</div><div class="line">done</div></pre></td></tr></table></figure>
<h2 id="将表的partition部分存入pat文本"><a href="#将表的partition部分存入pat文本" class="headerlink" title="将表的partition部分存入pat文本"></a>将表的partition部分存入pat文本</h2><h3 id="说明-表名存储在alltable-txt中-pat文本放在alltable文件夹下"><a href="#说明-表名存储在alltable-txt中-pat文本放在alltable文件夹下" class="headerlink" title="说明-表名存储在alltable.txt中 pat文本放在alltable文件夹下"></a>说明-表名存储在alltable.txt中 pat文本放在alltable文件夹下</h3><pre><code>#!/bin/bash
cat alltable.txt | while read linedo
hive -S -e &quot;show partitions $line&quot; &gt; alltable/$line.pat;
done
</code></pre><h2 id="提取字段数大于30的表"><a href="#提取字段数大于30的表" class="headerlink" title="提取字段数大于30的表"></a>提取字段数大于30的表</h2><p>###说明-表名在field.txt 提取到的表名存储在 ta.txt</p>
<pre><code>#!/bin/bash
while read line
do
if [ $(hive -e &quot;desc $line&quot; |ec -l) -gt 30 ];
then
echo $line &gt;&gt; ./ta.txt
fi
done &lt;field.txt
</code></pre><h2 id="在目录下查询包含某字段的文件"><a href="#在目录下查询包含某字段的文件" class="headerlink" title="在目录下查询包含某字段的文件"></a>在目录下查询包含某字段的文件</h2><h3 id="说明-查询到的文件名写入tabname-txt-放在tabname目录下"><a href="#说明-查询到的文件名写入tabname-txt-放在tabname目录下" class="headerlink" title="说明-查询到的文件名写入tabname.txt 放在tabname目录下"></a>说明-查询到的文件名写入tabname.txt 放在tabname目录下</h3><p>``` </p>
<p>#!/bin/bash<br>find .|xargs grep -ri “phone” -l &gt; tabname/tabname.txt</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL常用资源]]></title>
      <url>http://meson.space/2016/09/08/MySQL%E5%B8%B8%E7%94%A8%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h3><pre><code>mysql -h localhost -uroot -p
</code></pre><h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><pre><code>mysqldump -uroot -p db &gt; db.sql
</code></pre><h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><pre><code>mysql -uroot -p db &lt; db.sql
// or
mysql -uroot -p db -e &quot;source /path/to/db.sql&quot;
</code></pre><h3 id="开启远程登录"><a href="#开启远程登录" class="headerlink" title="开启远程登录"></a>开启远程登录</h3><pre><code>grant all privileges on ss.* to &apos;root&apos;@&apos;%&apos; indentified by &apos;passoword&apos; with grant option;
// or 
update user set Host=&quot;%&quot; and User=&quot;root&quot;
// 注意%是不包含localhost的
flush privileges;
</code></pre><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><pre><code>CREATE USER &apos;test&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos;;
grant all privileges on *.* to test@&apos;localhost&apos; identified by &apos;test&apos;;
</code></pre><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre><code>CREATE SCHEMA testdb DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
</code></pre><h3 id="赋予数据库权限"><a href="#赋予数据库权限" class="headerlink" title="赋予数据库权限"></a>赋予数据库权限</h3><pre><code>GRANT ALL ON testdb.* TO &apos;test&apos;@&apos;localhost&apos;;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[play2 多数据源的配置]]></title>
      <url>http://meson.space/2016/08/28/play2%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h2><p>   在平时我么做项目时，因为可能会碰到各种各样的需求，所以必然会碰到多数据源协同开发的情况，<br>   play是一种高效快速开发的开源框架，目前在业内也得到了一定认可，但国内使用的不多，大部分使用者都在国外，所以你懂得，国内的资料并不是很多。<br>   play的多数据源配置主要分为两个模块：<br>           一、application.conf的配置<br>               主要针对数据源的配置<br>           二、Model的配置<br>              主要针对所使用哪一个数据源进行配置<br>1、application.conf的配置<br>  不多说了直接上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#mysql connection</div><div class="line">db.mysql.driver=com.mysql.jdbc.Driver</div><div class="line">db.mysql.url=&quot;mysql://username:password@localhost/test?characterEncoding=utf-8&quot;</div><div class="line"></div><div class="line">#postgresql  connection</div><div class="line">db.default.driver=org.postgresql.Driver</div><div class="line">db.default.url=&quot;jdbc:postgresql://localhost:5432/test?characterEncoding=utf-8&quot;</div><div class="line">db.default.user=&quot;postgres&quot;  </div><div class="line">db.default.password=&quot;password&quot;</div></pre></td></tr></table></figure></p>
<p>  这里注意一般我们使用db.default.<em>来进行数据源的配置，其实这里的default就是数据源的名字，系统默认叫default 也可叫其他的<br>  就像这里我叫它mysql一样。这样就可以了吗 当然不行了，因为play的数据操作是通过model和Ebean来实现的，所以必须要给新加的数据源指向model<br>  即为：<br>       ebean.default=”models.</em>“<br>       ebean.mysql=”models.*”<br>       到此配置文件的配置就结束了</p>
<p>2、对Model的配置</p>
<p>  现在两个数据源都已经配置好了，单独使用任意一个都没有问题，但是你改怎么告诉它使用哪一个数据源呢<br>  public static Finder<long,columninfo> find = new Finder<long,columninfo>(“mysql”,Long.class,ColumnInfo.class);<br>  我们可以在Model中在生成Finder对象时指定，如上：<br>  其实从Finder的一个构造函数也可以看出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">  * Creates a finder for entity of type &lt;code&gt;T&lt;/code&gt; with ID of type &lt;code&gt;I&lt;/code&gt;, using a specific Ebean server.</div><div class="line">  */</div><div class="line">public Finder(String serverName, Class&lt;I&gt; idType, Class&lt;T&gt; type) &#123;</div><div class="line">    this.type = type;</div><div class="line">    this.idType = idType;</div><div class="line">    this.serverName = serverName;</div><div class="line">&#125;</div></pre></td></tr></table></figure></long,columninfo></long,columninfo></p>
<p>   当然如果你没有指定，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static Finder&lt;Long,ColumnInfo&gt; find = new Finder&lt;Long,ColumnInfo&gt;(Long.class,ColumnInfo.class);</div></pre></td></tr></table></figure></p>
<p>  系统就默认的访问default，这里就是Postgresql。  好了，接下来你就可以在play框架中愉快的使用多数据源了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实习季]]></title>
      <url>http://meson.space/2016/08/08/%E5%AE%9E%E4%B9%A0%E5%AD%A3/</url>
      <content type="html"><![CDATA[<p>这要从我开始找实习说起吧,我大概2月中旬开始找实习的，当时还比较懵懂的我，有一点迷茫，一阵乱投，后来静下来想一想，自己更喜欢后端开发，然后接下来，就开始一阵疯狂的去学习加强后端的知识，几乎每天凌晨两点左右睡觉，但却乐此不疲。这也算是继考研之后最疯狂的事情吧。我只想来上海实习，所以投的公司也全是上海的，这些面试中我来说几个印象特别深刻的：</p>
<h2 id="阿里巴巴"><a href="#阿里巴巴" class="headerlink" title="阿里巴巴"></a>阿里巴巴</h2><p>对应这家企业就不做过多介绍了，我投的是蚂蚁金服，我想用两个字来形容：“紧张”。这可能是我第一面试的缘故吧。一面问的问问题到不是很难。主要是计算机基础和java基础。因为前面准备的很充分，所以顺利通过了，第二面比较有难度，应该说相当残暴，（但是面试官人很好），依稀记得他让我手写堆排序的经历，面了一个半小时，聊了而很多，生活，学习，技术，爱情，理想。虽然扑了，但是很喜欢那个面试官。</p>
<h2 id="爱奇艺"><a href="#爱奇艺" class="headerlink" title="爱奇艺"></a>爱奇艺</h2><p>常规面试吧，手写代码，但是难度比阿里低一些，给的职位不是自己想做的方向，而且实习薪水。。。。在上海生活很困难。也就没去</p>
<h2 id="大众点评"><a href="#大众点评" class="headerlink" title="大众点评"></a>大众点评</h2><p>大众点评给了我三次面试，第一电话，第二次电话，第三次因为当时我在上海，就去了他们公司（环境不错）。面试官人不错，面试过程也很和谐，但是面试官后来得知我是研一的，他坐不了主，因为他们主管想招研二的。可以直接转正的。后来把我的情况上报了他们主管，然后让我回去等消息。我知道没戏了，没想到是他们最终给了我offer。我也蛮惊讶的，待遇给的还可以，比爱奇艺高多了。</p>
<h2 id="申请通"><a href="#申请通" class="headerlink" title="申请通"></a>申请通</h2><p>一家创业性公司，是上海交通大学学生组成的，也拿到了offer，而且他们给的待遇是我当时拿到得offer中最高的，另外有车补和饭补，而且做得方向也是我想做的方向，离我女朋友也很近。说真的心动了，所以心里当时就敲定它了。但是后来。。。。。</p>
<h2 id="平安科技"><a href="#平安科技" class="headerlink" title="平安科技"></a>平安科技</h2><p>这里我有颇多感触，我是比较喜欢平安科技的，面试我的也就是我的现在的leader，人很nice，看了他的简历后，绝对的技术牛人，而且是很有天赋那种，他愿意给我提供想需我想做的岗位，我当时就决定就跟着他干吧。不是说其他公司没有牛人，只是当时他征服了我。在此刻我也抛弃了之前：“只要方向是想做的，谁给钱多就去哪儿”的想法，没错，有时候我也相信缘分，我相信我能从他身上学到很多我想要的东西。后来我女朋友也来这里实习了，更加坚定了我待在这里的决心。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我现在在平安实习2个多月了，有很多感想，有人说平安很闲，可我没觉得，我也是经常会加班，也会有很多工作要做，现在我跟着毕业一个上海交通大学软院的一个人做后端开发，他给我的感觉是，什么都会，什么都懂，经验相当丰富刚毕业就达到了这种水平，我感觉他一定是一个有故事的男人。他教会了我很多东西，也是因为他我才决定要抱着一个做工匠的心去写代码，做一个把代码视为艺术的程序员。我很喜欢平安，很喜欢这群人。继续努力吧，也不知道写了什么，就到这儿吧</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 中AccessibleObject那些事儿]]></title>
      <url>http://meson.space/2016/07/29/Java%20%E4%B8%ADAccessibleObject%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>以前我很少写东西，感觉自己知道就可以了嘛，最近我改变了我的看法，把某些东西写出来可以让我们梳理一些对它的理解，更甚至有时候你会发现你看问题的盲点！</p>
<p>好了，进入正题，今天研究了一段代码，就是如何改变final类型的值。大家知道final类型的值一般情况下是不能改变的，但是经过楼主的不断尝试。发现它也是可以改变的。</p>
<p>这里我是用了AccessibleObject  ，在进行详细讲解之前，先来说一说AccessibleObject的相关知识。</p>
<p>public class AccessibleObject extends Object implements AnnotatedElement</p>
<p>AccessibleObject 类实现了AnnotatedElement，它是 Field、Method 和 Constructor 对象的基类。它提供了将反射的对象标记为在使用时取消默认 Java 语言访问控制检查的能力。对于公共成员、默认（打包）访问成员、受保护成员和私有成员，在分别使用 Field、Method 或 Constructor 对象来设置或获得字段、调用方法，或者创建和初始化类的新实例的时候，会执行访问检查。</p>
<p>AccessibleObject 的方法：</p>
<p>##isAccessible：</p>
<pre><code>public boolean isAccessible()获得此对象的 accessible 标志的值。
</code></pre><p>此对象的返回值 就是accessible的标志值，一般情况下无论 public，private,protected,默认等修饰的属性的access值均为false（注意他的意思并非是访问权限而是对该自己执行安全检查）。</p>
<p>##setAccessible：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static void setAccessible(object 　,　boolean flag) throws SecurityException</div></pre></td></tr></table></figure></p>
<p>使用单一安全性检查（为了提高效率）为一对象设置 accessible 标志。如果存在安全管理器，则在 ReflectPermission(“suppressAccessChecks”) 权限下调用 checkPermission 方法。当flag 为 true，表示不开启安全检查，但是不能更改输入 object的任何元素的可访问性（例如，如果元素对象是 Class 类的 Constructor 对象），则会引发 SecurityException。如果发生 SecurityException，对于少于（不包括）发生异常的元素的数组元素，可以将对象的可访问性设置为 flag；对于超出（包括）引发异常的元素的那些元素，则不更改其可访问性.</p>
<p>##getAnnotation：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public &lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass)</div></pre></td></tr></table></figure></p>
<p>从接口 AnnotatedElement 复制的描述 .如果存在该元素的指定类型的注释，则返回这些注释，否则返回 null。<br>指定者：接口 AnnotatedElement 中的 getAnnotation 　　<br>参数： annotationClass - 对应于注释类型的 Class 对象 　　<br>返回：如果该元素的指定注释类型的注释存在于此对象上，则返回这些注释，否则返回 null</p>
<p>##isAnnotationPresent：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　public boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</div></pre></td></tr></table></figure></p>
<p>从接口 AnnotatedElement 复制的描述 ,如果指定类型的注释存在于此元素上，则返回 true，否则返回 false。此方法主要是为了便于访问标记注释而设计的。<br>指定者：接口 AnnotatedElement 中的 isAnnotationPresent 　　<br>参数：annotationClass - 对应于注释类型的 Class 对象 　　<br>返回：如果指定注释类型的注释存在于此对象上，则返回 true，否则返回 false</p>
<p>##getAnnotation：<br>　　public Annotation[] getAnnotations()从接口 AnnotatedElement 复制的描述 ,返回此元素上存在的所有注释。（如果此元素没有注释，则返回长度为零的数组。）该方法的调用方可以随意修改返回的数组；这不会对其他调用方返回的数组产生任何影响。 　　指定者：接口 AnnotatedElement 中的 getAnnotations 　　<br>返回： 此元素上存在的所有注释</p>
<p>##getDeclaredAnnotation：<br>    public Annotation[] getDeclaredAnnotations()从接口 AnnotatedElement 复制的描述 　　返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用方可以随意修改返回的数组；这不会对其他调用方返回的数组产生任何影响。 　　<br>指定者： 接口 AnnotatedElement 中的 getDeclaredAnnotations 　　<br>返回： 直接存在于此元素上的所有注释</p>
<p>###我创建了一个Student的model:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">	public class Student &#123;</div><div class="line">	private String name;</div><div class="line">	private String no;</div><div class="line">	public String nickname;</div><div class="line"></div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getNo() &#123;</div><div class="line">		return no;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setNo(String no) &#123;</div><div class="line">		this.no = no;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getNickname() &#123;</div><div class="line">		return nickname;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setNickname(String nickname) &#123;</div><div class="line">		this.nickname = nickname;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###首先：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Reflect &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Student stu=new Student()；</div><div class="line">		stu.setName(&quot;gzq&quot;);</div><div class="line">		stu.setNickname(&quot;jiu ge&quot;);</div><div class="line">		stu.setNo(&quot;100901016&quot;);</div><div class="line">		Field field=stu.getClass().getDeclaredField(&quot;name&quot;);</div><div class="line">		Field field1=stu.getClass().getField(&quot;name&quot;);</div><div class="line">              field.isAccessible();</div><div class="line">		field.setAccessible(true);</div><div class="line">		field.set(stu, &quot;九哥&quot;);</div><div class="line">		System.out.println(&quot;field.get(stu):&quot;+field.get(stu));</div><div class="line">		 &#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>###这样打印出的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	java.lang.NoSuchFieldException: name</div><div class="line">at java.lang.Class.getField(Class.java:1537)</div><div class="line">at field.Reflect.main(Reflect.java:15</div></pre></td></tr></table></figure></p>
<p>###原因是<br>getField不能访问private修饰的属性。</p>
<p>###将其改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Field field=stu.getClass().getDeclaredField(&quot;name&quot;);</div><div class="line">Field field1=stu.getClass().getField(&quot;nickname&quot;);</div></pre></td></tr></table></figure></p>
<p>正常操作：打印出的结果是：九哥，而不是jiuge,这说明值确实变了。<br>如果不放心，可以在加一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">import java.lang.reflect.Field;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">public class Reflect &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Student stu = new Student();</div><div class="line"></div><div class="line">		stu.setName(&quot;gzq&quot;);</div><div class="line">		stu.setNickname(&quot;jiu ge&quot;);</div><div class="line">		stu.setNo(&quot;100901016&quot;);</div><div class="line">		try &#123;</div><div class="line">			Field field = stu.getClass().getDeclaredField(&quot;name&quot;);</div><div class="line">			Field field1 = stu.getClass().getField(&quot;nickname&quot;);// getfield</div><div class="line">																// 只能获取public字段</div><div class="line">			System.out.println(&quot;field:&quot; + field);</div><div class="line">			System.out.println(&quot;field1:&quot; + field1);</div><div class="line">			System.out.println(&quot;field.isAccessible:&quot; + field.isAccessible());</div><div class="line">			field.isAccessible();</div><div class="line">			field.setAccessible(true);</div><div class="line">			field.set(stu, &quot;九哥&quot;);</div><div class="line">			System.out.println(&quot;field.get(stu):&quot; + field.get(stu));</div><div class="line">			System.out.println(&quot;stu.getName():&quot; + stu.getName());</div><div class="line"></div><div class="line">		&#125; catch (NoSuchFieldException e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; catch (SecurityException e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; catch (IllegalArgumentException e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; catch (IllegalAccessException e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过加了属性的getName方法看一看：打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">field:private java.lang.String field.Student.name</div><div class="line">field1:public java.lang.String field.Student.nickname</div><div class="line">field.isAccessible:false</div><div class="line">field.get(stu):九哥</div><div class="line">stu.getName():九哥</div></pre></td></tr></table></figure></p>
<p>getName()获得的值确实是修改后的值</p>
<p>总结;仔细想了一下，其实这里的name是string 类型的，我看了一下string的源码，发现string的value 是final类型</p>
<p>一般final类型是没办法修改的，但是通过这种方法可以进行修改的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN 常用资源]]></title>
      <url>http://meson.space/2016/07/18/SVN%20%E5%B8%B8%E7%94%A8%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="将文件checkout到本地目录"><a href="#将文件checkout到本地目录" class="headerlink" title="将文件checkout到本地目录"></a>将文件checkout到本地目录</h3><pre><code>svn checkout path（path是服务器上的目录）
svn checkout svn://192.168.1.1/pro/domain
svn co
</code></pre><h3 id="往版本库中添加新的文件"><a href="#往版本库中添加新的文件" class="headerlink" title="往版本库中添加新的文件"></a>往版本库中添加新的文件</h3><pre><code>svn add file
svn add test.php(添加test.php)
svn add *.php(添加当前目录下所有的php文件)
svn add *.php --force(增加所有文件)
</code></pre><h3 id="将改动的文件提交到版本库"><a href="#将改动的文件提交到版本库" class="headerlink" title="将改动的文件提交到版本库"></a>将改动的文件提交到版本库</h3><pre><code>svn commit -m “LogMessage“ [-N] [--no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关)
svn commit -m “add test file for my test“ test.php
svn ci
</code></pre><h3 id="加锁-解锁"><a href="#加锁-解锁" class="headerlink" title="加锁/解锁"></a>加锁/解锁</h3><pre><code>svn lock -m “LockMessage“ [--force] PATH
svn lock -m “lock test file“ test.php
svn unlock PATH
</code></pre><h3 id="更新到某个版本"><a href="#更新到某个版本" class="headerlink" title="更新到某个版本"></a>更新到某个版本</h3><pre><code>svn update -r m path
svn update 如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。
svn update -r 200 test.php(将版本库中的文件test.php还原到版本200)

svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)

svn up
</code></pre><h3 id="查看文件或者目录状态"><a href="#查看文件或者目录状态" class="headerlink" title="查看文件或者目录状态"></a>查看文件或者目录状态</h3><pre><code>svn status path（目录下的文件和子目录的状态，正常状态不显示）
【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】

svn status -v path(显示文件和子目录状态)
第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。

注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。

svn st
</code></pre><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><pre><code>svn delete path -m “delete test fle“
svn delete svn://192.168.1.1/pro/domain/test.php -m “delete test file”
或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种
svn (del, remove, rm)
</code></pre><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><pre><code>svn log path 
svn log test.php 显示这个文件的所有修改记录，及其版本号的变化
</code></pre><h3 id="查看文件详细信息"><a href="#查看文件详细信息" class="headerlink" title="查看文件详细信息"></a>查看文件详细信息</h3><pre><code>svn info path
svn info test.php
</code></pre><h3 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h3><pre><code>svn diff path(将修改的文件与基础版本比较)
svn diff test.php
svn diff -r m:n path(对版本m和版本n比较差异)
svn diff -r 200:201 test.php
svn di
</code></pre><h3 id="将两个版本之间的差异合并到当前文件"><a href="#将两个版本之间的差异合并到当前文件" class="headerlink" title="将两个版本之间的差异合并到当前文件"></a>将两个版本之间的差异合并到当前文件</h3><pre><code>svn merge -r m:n path
svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）
</code></pre><h3 id="SVN-帮助"><a href="#SVN-帮助" class="headerlink" title="SVN 帮助"></a>SVN 帮助</h3><pre><code>svn help
svn help ci
</code></pre><h3 id="版本库下的文件和目录列表"><a href="#版本库下的文件和目录列表" class="headerlink" title="版本库下的文件和目录列表"></a>版本库下的文件和目录列表</h3><pre><code>svn list path 
svn ls
</code></pre><h3 id="创建纳入版本控制下的新目录"><a href="#创建纳入版本控制下的新目录" class="headerlink" title="创建纳入版本控制下的新目录"></a>创建纳入版本控制下的新目录</h3><pre><code>svn mkdir: 创建纳入版本控制下的新目录。
mkdir PATH…
mkdir URL…

创建版本控制的目录。

1、每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增调度，以待下一次的提交。
2、每个以URL指定的目录，都会透过立即提交于仓库中创建.在这两个情况下，所有的中间目录都必须事先存在。
</code></pre><h3 id="恢复本地修改"><a href="#恢复本地修改" class="headerlink" title="恢复本地修改"></a>恢复本地修改</h3><pre><code>svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert:
用法: revert PATH…
注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录
</code></pre><h3 id="代码库URL变更"><a href="#代码库URL变更" class="headerlink" title="代码库URL变更"></a>代码库URL变更</h3><pre><code>svn switch (sw): 更新工作副本至不同的URL。 

1、switch URL [PATH]
2、switch –relocate FROM TO [PATH...]
1、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。

2、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。
</code></pre><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><pre><code>svn resolved: 移除工作副本的目录或文件的“冲突”状态。 java设计模式之——策略模式
用法: resolved PATH…
注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。
</code></pre><h3 id="输出指定文件或URL的内容。"><a href="#输出指定文件或URL的内容。" class="headerlink" title="输出指定文件或URL的内容。"></a>输出指定文件或URL的内容。</h3><pre><code>svn cat 目标[@版本]…如果指定了版本，将从指定的版本开始查找。
svn cat -r PREV filename &gt; filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的)
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 指令集]]></title>
      <url>http://meson.space/2016/06/29/Git%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="库管理"><a href="#库管理" class="headerlink" title="库管理"></a>库管理</h2><h3 id="克隆库"><a href="#克隆库" class="headerlink" title="克隆库"></a>克隆库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/php/php-src.git</div><div class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/php/php-src.git <span class="comment"># 只抓取最近的一次 commit</span></div></pre></td></tr></table></figure>
<h2 id="历史管理"><a href="#历史管理" class="headerlink" title="历史管理"></a>历史管理</h2><h3 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> --pretty=oneline filename <span class="comment"># 一行显示</span></div><div class="line">git show xxxx <span class="comment"># 查看某次修改</span></div></pre></td></tr></table></figure>
<h3 id="标签功能"><a href="#标签功能" class="headerlink" title="标签功能"></a>标签功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git tag <span class="comment"># 显示所有标签</span></div><div class="line">git tag <span class="_">-l</span> <span class="string">'v1.4.2.*'</span> <span class="comment"># 显示 1.4.2 开头标签</span></div><div class="line">git tag v1.3 <span class="comment"># 简单打标签   </span></div><div class="line">git tag <span class="_">-a</span> v1.2 9fceb02 <span class="comment"># 后期加注标签</span></div><div class="line">git tag <span class="_">-a</span> v1.4 -m <span class="string">'my version 1.4'</span> <span class="comment"># 增加标签并注释， -a 为 annotated 缩写</span></div><div class="line">git show v1.4 <span class="comment"># 看某一标签详情</span></div><div class="line">git push origin v1.5 <span class="comment"># 分享某个标签</span></div><div class="line">git push origin --tags <span class="comment"># 分享所有标签</span></div></pre></td></tr></table></figure>
<h3 id="回滚操作"><a href="#回滚操作" class="headerlink" title="回滚操作"></a>回滚操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset 9fceb02 <span class="comment"># 保留修改</span></div><div class="line">git reset 9fceb02 --hard <span class="comment"># 删除之后的修改</span></div></pre></td></tr></table></figure>
<h3 id="取消文件的修改"><a href="#取消文件的修改" class="headerlink" title="取消文件的修改"></a>取消文件的修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout -- a.php <span class="comment">#  取消单个文件</span></div><div class="line">git checkout -- <span class="comment"># 取消所有文件的修改</span></div></pre></td></tr></table></figure>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git rm a.php  <span class="comment"># 直接删除文件</span></div><div class="line">git rm --cached a.php <span class="comment"># 删除文件暂存状态</span></div></pre></td></tr></table></figure>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git mv a.php ./<span class="built_in">test</span>/a.php</div></pre></td></tr></table></figure>
<h3 id="查看文件修改"><a href="#查看文件修改" class="headerlink" title="查看文件修改"></a>查看文件修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git diff          <span class="comment"># 查看未暂存的文件更新 </span></div><div class="line">git diff --cached <span class="comment"># 查看已暂存文件的更新</span></div></pre></td></tr></table></figure>
<h3 id="暂存和恢复当前staging"><a href="#暂存和恢复当前staging" class="headerlink" title="暂存和恢复当前staging"></a>暂存和恢复当前staging</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git stash <span class="comment"># 暂存当前分支的修改</span></div><div class="line">git stash apply <span class="comment"># 恢复最近一次暂存</span></div><div class="line">git stash list <span class="comment"># 查看暂存内容</span></div><div class="line">git stash apply stash@&#123;2&#125; <span class="comment"># 指定恢复某次暂存内容</span></div><div class="line">git stash drop stash@&#123;0&#125; <span class="comment"># 删除某次暂存内容</span></div></pre></td></tr></table></figure>
<h3 id="修改-commit-历史纪录"><a href="#修改-commit-历史纪录" class="headerlink" title="修改 commit 历史纪录"></a>修改 commit 历史纪录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase -i 0580eab8</div></pre></td></tr></table></figure>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch develop <span class="comment"># 只创建分支</span></div><div class="line">git checkout -b master develop <span class="comment"># 创建并切换到 develop 分支</span></div></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git checkout master <span class="comment"># 切换到 master 分支</span></div><div class="line">git merge --no-ff develop <span class="comment"># 把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录</span></div><div class="line">git rebase develop <span class="comment"># rebase 当前分支到 develop</span></div><div class="line">git branch <span class="_">-d</span> develop <span class="comment"># 删除 develop 分支</span></div></pre></td></tr></table></figure>
<h3 id="克隆远程分支"><a href="#克隆远程分支" class="headerlink" title="克隆远程分支"></a>克隆远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch -r <span class="comment"># 显示所有分支，包含远程分支</span></div><div class="line">git checkout origin/android</div></pre></td></tr></table></figure>
<h3 id="修复develop上的合并错误"><a href="#修复develop上的合并错误" class="headerlink" title="修复develop上的合并错误"></a>修复develop上的合并错误</h3><ol>
<li>将merge前的commit创建一个分之，保留merge后代码</li>
<li>将develop <code>reset --force</code>到merge前，然后<code>push --force</code></li>
<li>在分支中rebase develop</li>
<li>将分支push到服务器上重新merge</li>
</ol>
<h3 id="强制更新到远程分支最新版本"><a href="#强制更新到远程分支最新版本" class="headerlink" title="强制更新到远程分支最新版本"></a>强制更新到远程分支最新版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset --hard origin/master</div><div class="line">git submodule update --remote <span class="_">-f</span></div></pre></td></tr></table></figure>
<h2 id="Submodule使用"><a href="#Submodule使用" class="headerlink" title="Submodule使用"></a>Submodule使用</h2><h3 id="克隆带submodule的库"><a href="#克隆带submodule的库" class="headerlink" title="克隆带submodule的库"></a>克隆带submodule的库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> --recursive https://github.com/chaconinc/MainProject</div></pre></td></tr></table></figure>
<h3 id="clone主库后再去clone-submodule"><a href="#clone主库后再去clone-submodule" class="headerlink" title="clone主库后再去clone submodule"></a>clone主库后再去clone submodule</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/chaconinc/MainProject</div><div class="line">git submodule init</div><div class="line">git submodule update</div></pre></td></tr></table></figure>
<h2 id="Git设置"><a href="#Git设置" class="headerlink" title="Git设置"></a>Git设置</h2><p>Git的全局设置在<code>~/.gitconfig</code>中，单独设置在<code>project/.git/config</code>下。</p>
<p>忽略设置全局在<code>~/.gitignore_global</code>中，单独设置在<code>project/.gitignore</code>下。</p>
<h3 id="设置-commit-的用户和邮箱"><a href="#设置-commit-的用户和邮箱" class="headerlink" title="设置 commit 的用户和邮箱"></a>设置 commit 的用户和邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name <span class="string">"xx"</span></div><div class="line">git config user.email <span class="string">"xx@xx.com"</span></div></pre></td></tr></table></figure>
<p>或者直接修改config文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    name = xxx</div><div class="line">    email = xxx@xxx.com</div></pre></td></tr></table></figure>
<h3 id="查看设置项"><a href="#查看设置项" class="headerlink" title="查看设置项"></a>查看设置项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure>
<h3 id="设置git终端颜色"><a href="#设置git终端颜色" class="headerlink" title="设置git终端颜色"></a>设置git终端颜色</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global color.diff auto</div><div class="line">git config --global color.status auto</div><div class="line">git config --global color.branch auto</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[了解GitHub工作流【转】]]></title>
      <url>http://meson.space/2016/05/25/%E4%BA%86%E8%A7%A3GitHub%E5%B7%A5%E4%BD%9C%E6%B5%81%E3%80%90%E8%BD%AC%E3%80%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>GitHub流是一个轻量级，基于分支的工作流，它使得小组和项目的部署变得标准化。这个向导解释了GitHub流是如何&amp;为什么工作的。</p>
</blockquote>
<p><img src="http://7u2ho6.com1.z0.glb.clouddn.com/tech-github-flow.png" alt="github-flow"></p>
<h2 id="创建一个分支"><a href="#创建一个分支" class="headerlink" title="创建一个分支"></a>创建一个分支</h2><p>当你工作在一个项目中，你可能会在任何时间产生不同的想法和特性计划–这些都是准备完成的，或者其他不准备完成的。分支的存在可以帮助你管理工作流。</p>
<p>当你在自己的项目中创建一个分支的时候，也就等于创建了一个尝试自己想法的环境。你在这个分支修改的东西不会影响到主分支，所以你可以尽情的测试和提交改变。这些改变直到你的合作伙伴审查过，确保安全才会被合并到主分支中。</p>
<p>分支是Git的一个核心概念，并且GitHub流完全基于这个概念。只有一个规则，<strong>那就是<code>master</code>分支必须是可部署的。</strong></p>
<p>因此，当你在修复bug或者创建新功能时，你的新分支必须创建在master之外。你的分支名称应该是自描述的（如：<code>refactor-authentication</code>，<code>user-content-cache-key</code>，<code>make-retina-avatars</code>），所以其他人可以了解什么正在进行。</p>
<h2 id="增加提交"><a href="#增加提交" class="headerlink" title="增加提交"></a>增加提交</h2><p>一但你的分支创建完成，就可以进行修改了。不管你进行了增加、修改或者删除一个文件，你都可以进行提交代码，将他们增加到分支中去。这个过程可以保持跟踪你对一个特性分支工作的发展。</p>
<p>提交同样为你的项目创建了一个清晰的历史，这样别人就可以了解你做这些的原因以及内容。每一个提交有一个相关的描述，这个描述可以解释你具体做了什么修改。另外，每一个提交都应该是分开的修改单元。这个使得你可以在发现bug的时候回滚修改，或者你决定朝向不同的方向。</p>
<p>提交描述是非常重要的，尤其因为Git跟踪你的改变并且在他们被推送到服务器上的时候显示他们。通过写出清楚的提交描述，你可以使得别人容易遵从和提供反馈。</p>
<h2 id="开启一个Pull-Request"><a href="#开启一个Pull-Request" class="headerlink" title="开启一个Pull Request"></a>开启一个Pull Request</h2><p>Pull Request最初开始于对你的提交的讨论。因为他们紧密集成在Git库下，如果你的请求被接受，所有人可以看到被合并的改变具体包含什么。</p>
<p>你可以开启一个Pull Request在开发过程工任何部分：当你有少量代码，或者你希望分享一些截图或平常的想法，或者当你被卡住希望获得帮助及建议，又或者当你准备好让别人来审查你的工作。通过在请求描述中使用GitHub的 @方式 ，你可以向某一个人或者团队要求反馈，不论他们不在线或者在别的时区。</p>
<p>Pull Request对于开元项目的管理和分享都非常有用。如果你使用一个Fork&amp;Pull模型，Pull Request提供了一个方式来告知项目管理者他们希望关注的改变。如果你使用Shared repository Model，Pull Request有助于开始审查和讨论即将合并到master分支的改变。</p>
<h2 id="讨论并审核你的代码"><a href="#讨论并审核你的代码" class="headerlink" title="讨论并审核你的代码"></a>讨论并审核你的代码</h2><p>一但一个Pull Request被开启，负责审核代码改变的人们或团队可能会有一些问题或者评论。可能代码风格不符合项目指导，修改缺少单元测试，或者所有修改都做的非常好。Pull Request被设计来促进和不活这种类型的会话。</p>
<p>在对你提交进行讨论和反馈的过程中，你可以继续推送你的分支。如果有人评论你忘了做一些事情，或者有一些bug在你的代码中，你可以在自己分支中修复并且推送这些修改。GitHub将在统一的Pull Request视图中给你显示新的提交和其他额外的反馈。</p>
<p>Pull Request评论用Markdown写成，所以你可以嵌入图片和表情符号，使用pre-formatted的文字块，和高亮的格式。</p>
<h2 id="合并和部署"><a href="#合并和部署" class="headerlink" title="合并和部署"></a>合并和部署</h2><p>一但你的Pull Request审核通过并且分支通过测试，这些代码就可以被合并到master分支以便部署。如果你需要在合并到GitHub库前进行测试，你可以在本地先进行合并。这些在你推送到库中前都是非常容易控制的。</p>
<p>一但被合并，Pull Request会对你的代码保存一个历史修改记录。因为它们是可搜索的，所以所有人都可以回顾到历史纪录去了解一个决定是为什么或者怎么完成的。</p>
<p>通过在Pull Request的文字中包含某些关键字，你可以关联代码和issues。当你的Pull Request被合并，相关的issues同样会被关闭。比如，输入<code>Closes #32</code>将会关闭库中的32号issue。想要获得更多信息，点<a href="https://help.github.com/articles/closing-issues-via-commit-messages" target="_blank" rel="external">这里</a>。</p>
<p>原文链接：<a href="http://guides.github.com/overviews/flow/" target="_blank" rel="external">http://guides.github.com/overviews/flow/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[shell 指令集]]></title>
      <url>http://meson.space/2016/05/13/shell%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="文本内容搜索"><a href="#文本内容搜索" class="headerlink" title="文本内容搜索"></a>文本内容搜索</h3><pre><code>grep aaa * 
</code></pre><h3 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h3><pre><code>查看文件夹大小   du -h --max-depth=1 /home/ys
查看驱动器空间   df -h 
</code></pre><h3 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h3><pre><code>tar zxvf aaa.tar.gz
tar zcvf aaa.tar.gz aaa
</code></pre><h3 id="登陆到其他用户"><a href="#登陆到其他用户" class="headerlink" title="登陆到其他用户"></a>登陆到其他用户</h3><pre><code>login
</code></pre><h3 id="查看端口的占用"><a href="#查看端口的占用" class="headerlink" title="查看端口的占用"></a>查看端口的占用</h3><pre><code>lsof -i:8087  查看8087端口的使用
</code></pre><h3 id="批量杀死进程"><a href="#批量杀死进程" class="headerlink" title="批量杀死进程"></a>批量杀死进程</h3><pre><code>ps -aux|grep name|grep -v grep|cut -c 9-15|xargs kill -9
</code></pre><h3 id="查看当前时间"><a href="#查看当前时间" class="headerlink" title="查看当前时间"></a>查看当前时间</h3><pre><code>date       时间
date +%s   时间戳
date -d &quot;2010-07-20 10:25:30&quot; +%s  指定时间时间戳
date -d &quot;@1279592730&quot;    时间戳转时间
date -d &quot;1970-01-01 14781 days&quot; &quot;+%Y/%m/%d %H:%M:%S&quot; 
</code></pre><h3 id="查看进程内存使用情况"><a href="#查看进程内存使用情况" class="headerlink" title="查看进程内存使用情况"></a>查看进程内存使用情况</h3><pre><code>top -d 1 -p pid [,pid ...]
pmap pid 
ps aux|grep process_name
查看/proc/process_id/文件夹下的status文件
</code></pre><h3 id="查看Linux内核版本或发布版本"><a href="#查看Linux内核版本或发布版本" class="headerlink" title="查看Linux内核版本或发布版本"></a>查看Linux内核版本或发布版本</h3><pre><code>lsb_release -a
uname -a
</code></pre><h3 id="一句话实现一个HTTP服务，把当前文件夹作为根目录"><a href="#一句话实现一个HTTP服务，把当前文件夹作为根目录" class="headerlink" title="一句话实现一个HTTP服务，把当前文件夹作为根目录"></a>一句话实现一个HTTP服务，把当前文件夹作为根目录</h3><pre><code>python -m SimpleHTTPServer
</code></pre><h3 id="查看本地网络服务活动状态"><a href="#查看本地网络服务活动状态" class="headerlink" title="查看本地网络服务活动状态"></a>查看本地网络服务活动状态</h3><pre><code>lsof -i
</code></pre><h3 id="查看自己的外网ip"><a href="#查看自己的外网ip" class="headerlink" title="查看自己的外网ip"></a>查看自己的外网ip</h3><pre><code>curl ifconfig.me
</code></pre><h3 id="下载整个网站"><a href="#下载整个网站" class="headerlink" title="下载整个网站"></a>下载整个网站</h3><pre><code>wget --random-wait -r -p -e robots=off -U mozilla http://www.example.com
</code></pre><h3 id="后台运行一段不中止的程序，并可随时查看它的状态"><a href="#后台运行一段不中止的程序，并可随时查看它的状态" class="headerlink" title="后台运行一段不中止的程序，并可随时查看它的状态"></a>后台运行一段不中止的程序，并可随时查看它的状态</h3><pre><code>screen -d -m -S some_ name ping my_router
</code></pre><h3 id="查看进程执行的时间"><a href="#查看进程执行的时间" class="headerlink" title="查看进程执行的时间"></a>查看进程执行的时间</h3><pre><code>ps -A -opid,stime,etime,args | grep python
</code></pre><h3 id="创建守护进程"><a href="#创建守护进程" class="headerlink" title="创建守护进程"></a>创建守护进程</h3><pre><code>nohup python /var/www/a.py &amp;
</code></pre><h3 id="查看当前文件夹下文件（文件夹）大小"><a href="#查看当前文件夹下文件（文件夹）大小" class="headerlink" title="查看当前文件夹下文件（文件夹）大小"></a>查看当前文件夹下文件（文件夹）大小</h3><pre><code>du -h --max-depth=1 .
</code></pre><h3 id="查看所有磁盘大小"><a href="#查看所有磁盘大小" class="headerlink" title="查看所有磁盘大小"></a>查看所有磁盘大小</h3><pre><code>df -h
</code></pre><h3 id="诊断网络"><a href="#诊断网络" class="headerlink" title="诊断网络"></a>诊断网络</h3><pre><code>mtr 
ping
traceroute
dig
</code></pre><h3 id="列出本机监听的端口号"><a href="#列出本机监听的端口号" class="headerlink" title="列出本机监听的端口号"></a>列出本机监听的端口号</h3><pre><code>netstat –tlnp
netstat -anop
</code></pre><h3 id="在远程机器上运行一段脚本"><a href="#在远程机器上运行一段脚本" class="headerlink" title="在远程机器上运行一段脚本"></a>在远程机器上运行一段脚本</h3><pre><code>ssh user@server bash &lt; /path/to/local/script.sh
</code></pre><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><pre><code>nc -z -v -n 127.0.0.1 20-100
</code></pre><h3 id="负载测试，30秒内向Google发起20个并发连接"><a href="#负载测试，30秒内向Google发起20个并发连接" class="headerlink" title="负载测试，30秒内向Google发起20个并发连接"></a>负载测试，30秒内向Google发起20个并发连接</h3><pre><code>siege -c20 www.google.co.uk -b -t30s
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统中多个命令连续执行方法]]></title>
      <url>http://meson.space/2016/05/11/Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%A4%9A%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%BF%9E%E7%BB%AD%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有的时候执行一些简单指令的时候总不想分好几次输入，利用以下方法可以方便的一次执行多个命令</p>
</blockquote>
<h3 id="连续不中断执行"><a href="#连续不中断执行" class="headerlink" title="连续不中断执行"></a>连续不中断执行</h3><p>用<code>;</code>可以让多个命令连续知行，中间出现错误并不会中断后面命令，如</p>
<pre><code>mkdir test; mkdir test; rmdir test;
</code></pre><p>虽然第二条指令会报错，但是不会影响后面的指令，最后test目录不存在</p>
<h3 id="出错停止后面指令"><a href="#出错停止后面指令" class="headerlink" title="出错停止后面指令"></a>出错停止后面指令</h3><p>用<code>&amp;&amp;</code>分割的命令，如果没有错误会一直执行下去，出现错误立即中止，如</p>
<pre><code>mkdir test &amp;&amp; mkdir test &amp;&amp; rmdir test
</code></pre><p>这回在第二个指令处就中止了</p>
<h3 id="一次正确即停止"><a href="#一次正确即停止" class="headerlink" title="一次正确即停止"></a>一次正确即停止</h3><p>用<code>||</code>分割的命令，如果有错误就一直执行下去，直到一次正确立即中止，如</p>
<pre><code>mkdir test || mkdir test || rmdir test
mkdir test || mkdir test || rmdir test || mkdir test
</code></pre><p>第一次执行第一条指令就正确，后面的不执行</p>
<p>第二次执行前两条都错误，直到最后一条才正确，最后一条不再执行</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[七种常见经典排序算法总结（C++版）]]></title>
      <url>http://meson.space/2016/03/29/%E4%B8%83%E7%A7%8D%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%EF%BC%88C++%E7%89%88%EF%BC%89/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>排序算法是非常常见也非常基础的算法，以至于大部分情况下它们都被集成到了语言的辅助库中。排序算法虽然已经可以很方便的使用，但是理解排序算法可以帮助我们找到解题的方向。</p>
<h2 id="1-冒泡排序-Bubble-Sort"><a href="#1-冒泡排序-Bubble-Sort" class="headerlink" title="1. 冒泡排序 (Bubble Sort)"></a>1. 冒泡排序 (Bubble Sort)</h2><p>冒泡排序是最简单粗暴的排序方法之一。它的原理很简单，每次从左到右两两比较，把大的交换到后面，每次可以确保将前M个元素的最大值移动到最右边。</p>
<p><strong>步骤</strong></p>
<ol>
<li>从左开始比较相邻的两个元素x和y，如果 x &gt; y 就交换两者</li>
<li>执行比较和交换，直到到达数组的最后一个元素</li>
<li>重复执行1和2，直到执行n次，也就是n个最大元素都排到了最后</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">1</span>; i++) &#123; <span class="comment">// times</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.size() - i - <span class="number">1</span>; j++) &#123; <span class="comment">// position</span></div><div class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</div><div class="line">                <span class="keyword">int</span> temp = nums[j];</div><div class="line">                nums[j] = nums[j + <span class="number">1</span>];</div><div class="line">                nums[j + <span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>交换的那一步可以不借助temp，方法是</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nums[j] += nums[j + <span class="number">1</span>];</div><div class="line">nums[j + <span class="number">1</span>] = num[j] - nums[j + <span class="number">1</span>];</div><div class="line">nums[j] -= num[j + <span class="number">1</span>];</div></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>由于我们要重复执行n次冒泡，每次冒泡要执行n次比较（实际是1到n的等差数列，也就是<code>(a1 + an) * n / 2</code>），也就是 <code>O(n^2)</code>。 空间复杂度是<code>O(n)</code>。</p>
<h2 id="2-插入排序（Insertion-Sort）"><a href="#2-插入排序（Insertion-Sort）" class="headerlink" title="2. 插入排序（Insertion Sort）"></a>2. 插入排序（Insertion Sort）</h2><p>插入排序的原理是从左到右，把选出的一个数和前面的数进行比较，找到最适合它的位置放入，使前面部分有序。</p>
<p><strong>步骤</strong></p>
<ol>
<li>从左开始，选出当前位置的数x，和它之前的数y比较，如果x &lt; y则交换两者</li>
<li>对x之前的数都执行1步骤，直到前面的数字都有序</li>
<li>选择有序部分后一个数字，插入到前面有序部分，直到没有数字可选择</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); i++) &#123; <span class="comment">// position</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[j - <span class="number">1</span>]) &#123;</div><div class="line">                <span class="keyword">int</span> temp = nums[j];</div><div class="line">                nums[j] = nums[j - <span class="number">1</span>];</div><div class="line">                nums[j - <span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>因为要选择n次，而且插入时最坏要比较n次，所以时间复杂度同样是<code>O(n^2)</code>。空间复杂度是<code>O(n)</code>。</p>
<h2 id="3-选择排序（Selection-Sort）"><a href="#3-选择排序（Selection-Sort）" class="headerlink" title="3. 选择排序（Selection Sort）"></a>3. 选择排序（Selection Sort）</h2><p>选择排序的原理是，每次都从乱序数组中找到最大（最小）值，放到当前乱序数组头部，最终使数组有序。</p>
<p><strong>步骤</strong></p>
<ol>
<li>从左开始，选择后面元素中最小值，和最左元素交换</li>
<li>从当前已交换位置往后执行，直到最后一个元素</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123; <span class="comment">// position</span></div><div class="line">        <span class="keyword">int</span> min = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[min]) &#123;</div><div class="line">                min = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> temp = nums[i];</div><div class="line">        nums[i] = nums[min];</div><div class="line">        nums[min] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>每次要找一遍最小值，最坏情况下找n次，这样的过程要执行n次，所以时间复杂度还是<code>O(n^2)</code>。空间复杂度是<code>O(n)</code>。</p>
<h2 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h2><p>希尔排序从名字上看不出来特点，因为它是以发明者命名的。它的另一个名字是“递减增量排序算法“。这个算法可以看作是插入排序的优化版，因为插入排序需要一位一位比较，然后放置到正确位置。为了提升比较的跨度，希尔排序将数组按照一定步长分成几个子数组进行排序，通过逐渐减短步长来完成最终排序。</p>
<p><strong>例子</strong></p>
<p>例如 <code>[10, 80, 70, 100, 90, 30, 20]</code><br>如果我们按照一次减一半的步长来算， 这个数组第一次排序时以3为步长，子数组是：</p>
<p><code>10 80 70</code><br><code>90 30 20</code><br><code>100</code></p>
<p>这里其实按照列划分的4个子数组，排序后结果为</p>
<p><code>10 30 20</code><br><code>90 80 70</code><br><code>100</code></p>
<p>也就是 <code>[10, 30 20 90 80 70 100]</code></p>
<p>然后再以1为步长生成子数组</p>
<p><code>10</code><br><code>30</code><br><code>20</code><br><code>..</code></p>
<p>这个时候就是一纵列了，也就是说最后一定是以一个数组来排序的。</p>
<p><strong>步骤</strong></p>
<ol>
<li>计算当前步长，按步长划分子数组</li>
<li>子数组内插入排序</li>
<li>步长除以2后继续12两步，直到步长最后变成1</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = nums.size() &gt;&gt; <span class="number">1</span>; gap &gt; <span class="number">0</span>; gap &gt;&gt;= <span class="number">1</span>) &#123; <span class="comment">// times</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; nums.size(); i++) &#123; <span class="comment">// position</span></div><div class="line">            <span class="keyword">int</span> temp = nums[i];</div><div class="line"></div><div class="line">            <span class="keyword">int</span> j = i - gap;</div><div class="line">            <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; temp; j -= gap) &#123;</div><div class="line">                nums[j + gap] = nums[j];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            nums[j + gap] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>希尔排序的时间复杂度受步长的影响，具体分析在<a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F#.E6.AD.A5.E9.95.BF.E5.BA.8F.E5.88.97" target="_blank" rel="external">维基百科</a>。</p>
<h2 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h2><p>归并排序是采用分治法（Divide and Conquer）的一个典型例子。这个排序的特点是把一个数组打散成小数组，然后再把小数组拼凑再排序，直到最终数组有序。</p>
<p><strong>步骤</strong></p>
<ol>
<li>把当前数组分化成n个单位为1的子数组，然后两两比较合并成单位为2的n/2个子数组</li>
<li>继续进行这个过程，按照2的倍数进行子数组的比较合并，直到最终数组有序</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_array</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> b, <span class="keyword">int</span> m, <span class="keyword">int</span> e, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;temp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> lb = b, rb = m, tb = b;</div><div class="line">    <span class="keyword">while</span> (lb != m &amp;&amp; rb != e)</div><div class="line">        <span class="keyword">if</span> (nums[lb] &lt; nums[rb])</div><div class="line">            temp[tb++] = nums[lb++];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            temp[tb++] = nums[rb++];</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (lb &lt; m)</div><div class="line">        temp[tb++] = nums[lb++];</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (rb &lt; e)</div><div class="line">        temp[tb++] = nums[rb++];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b;i &lt; e; i++)</div><div class="line">        nums[i] = temp[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;temp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> m = (b + e) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (m != b) &#123;</div><div class="line">        merge_sort(nums, b, m, temp);</div><div class="line">        merge_sort(nums, m, e, temp);</div><div class="line">        merge_array(nums, b, m, e, temp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个实现中加了一个temp，是和原数组一样大的一个空间，用来临时存放排序后的子数组的。</p>
<p><strong>复杂度分析</strong></p>
<p>在<code>merge_array</code>过程中，实际的操作是当前两个子数组的长度，即2m。又因为打散数组是二分的，最终循环执行数是<code>logn</code>。所以这个算法最终时间复杂度是<code>O(nlogn)</code>，空间复杂度是<code>O(n)</code>。</p>
<h2 id="6-快速排序（Quick-Sort）"><a href="#6-快速排序（Quick-Sort）" class="headerlink" title="6. 快速排序（Quick Sort）"></a>6. 快速排序（Quick Sort）</h2><p>快速排序也是利用分治法实现的一个排序算法。快速排序和归并排序不同，它不是一半一半的分子数组，而是选择一个基准数，把比这个数小的挪到左边，把比这个数大的移到右边。然后不断对左右两部分也执行相同步骤，直到整个数组有序。</p>
<p><strong>步骤</strong></p>
<ol>
<li>用一个基准数将数组分成两个子数组</li>
<li>将大于基准数的移到右边，小于的移到左边</li>
<li>递归的对子数组重复执行1，2，直到整个数组有序</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;temp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> m = (b + e) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (m != b) &#123;</div><div class="line">        <span class="keyword">int</span> lb = b, rb = e - <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = b; i &lt; e; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i == m)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[m])</div><div class="line">                temp[lb++] = nums[i];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                temp[rb--] = nums[i];</div><div class="line">        &#125;</div><div class="line">        temp[lb] = nums[m];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = b; i &lt; e; i++)</div><div class="line">            nums[i] = temp[i];</div><div class="line">        </div><div class="line">        quick_sort(nums, b, lb, temp);</div><div class="line">        quick_sort(nums, lb + <span class="number">1</span>, e, temp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解法2: 不需要辅助空间</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> b, <span class="keyword">int</span> e)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (b &lt; e - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> lb = b, rb = e - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (lb &lt; rb) &#123;</div><div class="line">            <span class="keyword">while</span> (nums[rb] &gt;= nums[b] &amp;&amp; lb &lt; rb)</div><div class="line">                rb--;</div><div class="line">            <span class="keyword">while</span> (nums[lb] &lt;= nums[b] &amp;&amp; lb &lt; rb)</div><div class="line">                lb++;</div><div class="line">            swap(nums[lb], nums[rb]);</div><div class="line">        &#125;</div><div class="line">        swap(nums[b], nums[lb]);</div><div class="line">        quick_sort(nums, b, lb);</div><div class="line">        quick_sort(nums, lb + <span class="number">1</span>, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>快速排序也是一个不稳定排序，时间复杂度看<a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F#.E5.B9.B3.E5.9D.87.E8.A4.87.E9.9B.9C.E5.BA.A6" target="_blank" rel="external">维基百科</a>。空间复杂度是<code>O(n)</code>。</p>
<h2 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h2><p>堆排序经常用于求一个数组中最大k个元素时。因为堆实际上是一个完全二叉树，所以用它可以用一维数组来表示。因为最大堆的第一位总为当前堆中最大值，所以每次将最大值移除后，调整堆即可获得下一个最大值，通过一遍一遍执行这个过程就可以得到前k大元素，或者使堆有序。</p>
<p>在了解算法之前，首先了解在一维数组中节点的下标：</p>
<ul>
<li>i节点的父节点 parent(i) = floor((i-1)/2) </li>
<li>i节点的左子节点 left(i) = 2i + 1</li>
<li>i节点的右子节点 right(i) = 2i + 2</li>
</ul>
<p><strong>步骤</strong></p>
<ol>
<li>构造最大堆（Build Max Heap）：首先将当前元素放入最大堆下一个位置，然后将此元素依次和它的父节点比较，如果大于父节点就和父节点交换，直到比较到根节点。重复执行到最后一个元素。</li>
<li>最大堆调整（Max Heapify）：调整最大堆即将根节点移除后重新整理堆。整理方法为将根节点和最后一个节点交换，然后把堆看做n-1长度，将当前根节点逐步移动到其应该在的位置。</li>
<li>堆排序（HeapSort）：重复执行2，直到所有根节点都已移除。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n = nums.size();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">// build max heap</span></div><div class="line">        max_heapify(nums, i, nums.size() - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123; <span class="comment">// heap sort</span></div><div class="line">        <span class="keyword">int</span> temp = nums[i];</div><div class="line">        num[i] = nums[<span class="number">0</span>];</div><div class="line">        num[<span class="number">0</span>] = temp;</div><div class="line">        max_heapify(nums, <span class="number">0</span>, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_heapify</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> beg, <span class="keyword">int</span> end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> curr = beg;</div><div class="line">    <span class="keyword">int</span> child = curr * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (child &lt; end) &#123;</div><div class="line">        <span class="keyword">if</span> (child + <span class="number">1</span> &lt; end &amp;&amp; nums[child] &lt; nums[child + <span class="number">1</span>]) &#123;</div><div class="line">            child++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (nums[curr] &lt; nums[child]) &#123;</div><div class="line">            <span class="keyword">int</span> temp = nums[curr];</div><div class="line">            nums[curr] = nums[child];</div><div class="line">            num[child] = temp;</div><div class="line">            curr = child;</div><div class="line">            child = <span class="number">2</span> * curr + <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>堆执行一次调整需要<code>O(logn)</code>的时间，在排序过程中需要遍历所有元素执行堆调整，所以最终时间复杂度是<code>O(nlogn)</code>。空间复杂度是<code>O(n)</code>。</p>
]]></content>
    </entry>
    
  
  
</search>
